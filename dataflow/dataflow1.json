{
	"name": "dataflow1",
	"properties": {
		"description": "Cleaning and transformations",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CustomersCombined",
						"type": "DatasetReference"
					},
					"name": "customers"
				},
				{
					"dataset": {
						"referenceName": "OrdersCombined",
						"type": "DatasetReference"
					},
					"name": "orders"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Customers_Orders_Merged",
						"type": "DatasetReference"
					},
					"name": "mergedData"
				}
			],
			"transformations": [
				{
					"name": "join"
				},
				{
					"name": "updateEmails",
					"description": "select columns with missing emails\n"
				},
				{
					"name": "derivedEmail",
					"description": "update emails\n"
				},
				{
					"name": "groupByOrders",
					"description": "remove duplicated rows based on customer ID and order ID"
				},
				{
					"name": "derivedPrice",
					"description": "compute the price from the per unit cost and quantity"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customers",
				"source(output(",
				"          OrderID as short,",
				"          ProductID as string,",
				"          ProductName as string,",
				"          Quantity as short,",
				"          OrderTimestamp as string,",
				"          Price as double,",
				"          CustomerID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> orders",
				"customers, orders join(customers@CustomerID == orders@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join",
				"join alterRow(updateIf(isNull(Email))) ~> updateEmails",
				"updateEmails derive(Email = concat(lower(FirstName), '.', lower(LastName), '@example.com')) ~> derivedEmail",
				"derivedEmail aggregate(groupBy(OrderID,",
				"          customers@CustomerID),",
				"     each(match(!in(['CustomerID','OrderID'],name)), $$ = first($$))) ~> groupByOrders",
				"groupByOrders derive(TotalPrice = Quantity * Price) ~> derivedPrice",
				"derivedPrice sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          Country as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> mergedData"
			]
		}
	}
}